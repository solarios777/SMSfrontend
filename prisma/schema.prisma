generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  sessions      Session[]
 
  @@map("users")
}

model Admin {
  id       String @id @default(cuid())
  username String @unique
  role     UserRole @default(ADMIN)
  password  String?
}

model Student {
  id          String @id @default(cuid())
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  password      String?
  birthday    DateTime
  role UserRole @default(STUDENT)
  enrollments Enrollment[]
  parentId    String?         // Optional parent ID
  parent      Parent?         @relation(fields: [parentId], references: [id]) 
  
}

model Teacher {
  id        String @id @default(cuid())
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  birthday  DateTime?
  role      UserRole @default(TEACHER)
  password  String?
  assignments TeacherAssignment[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  assignments TeacherAssignment[]
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  role      UserRole @default(PARENT)
  password  String?
  students    Student[] 
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique
  enrollments Enrollment[]
  assignments TeacherAssignment[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int
  events        Event[]
  announcements Announcement[]
  supervisorId  String?
  enrollments Enrollment[]
  assignments TeacherAssignment[]
}
model Enrollment {
  id        Int      @id @default(autoincrement())
  studentId String
  gradeId   Int
  classId   Int
  year      Int
  student   Student @relation(fields: [studentId], references: [id])
  grade     Grade   @relation(fields: [gradeId], references: [id])
  class     Class   @relation(fields: [classId], references: [id])
}

model TeacherAssignment {
  id        Int      @id @default(autoincrement())
  teacherId String
  gradeId   Int
  classId   Int
  subjectId Int
  year      Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  grade     Grade   @relation(fields: [gradeId], references: [id])
  class     Class   @relation(fields: [classId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])
}


model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserRole {
  ADMIN 
  TEACHER 
  STUDENT 
  PARENT 
}


enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}


