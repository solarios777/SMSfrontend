generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
model Counter {
  id       String @id @default(cuid())
  userType String @unique
  count    Int    @default(0)
  year     Int    // Add a field to track the year
}


model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  sessions      Session[]

  @@map("users")
}

model Admin {
  id        String @id @default(cuid())
  username  String @unique
  name      String
  surname   String
  email     String? @unique
  phone     String? @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime @default(now())
  birthday  DateTime?
  role      UserRole @default(ADMIN)
  password  String?

  createdResults  Result[] @relation(name: "CreatedByAdmin") 
  updatedResults  Result[] @relation(name: "UpdatedByAdmin") 
}


model Student {
  id          String @id @default(cuid())
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  password    String?
  birthday    DateTime
  role        UserRole @default(STUDENT)
  enrollments Enrollment[]
  attendance  Attendance[]
  result      Result[]
  rank        Rank[]
  parentId    String?         // Optional parent ID
  parent      Parent?         @relation(fields: [parentId], references: [id]) 
}

model Teacher {
  id        String @id @default(cuid())
  username  String @unique
  name      String
  surname   String
  email     String? @unique
  phone     String? @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime @default(now())
  birthday  DateTime?
  role      UserRole @default(TEACHER)
  password  String?

  assignments      TeacherAssignment[]
  superviser      Superviser[]

  createdResults  Result[] @relation(name: "CreatedByTeacher")
  updatedResults  Result[] @relation(name: "UpdatedByTeacher")
}







model Parent {
  id        String      @id @default(cuid())
  password  String?
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  sex       UserSex
  bloodType String
  createdAt DateTime  @default(now())
  role      UserRole @default(PARENT)
  birthday  DateTime?
  students  Student[]
}
model Subject {
  id       String    @id @default(cuid())
  name     String    @unique
  result   Result[]
  assignments TeacherAssignment[]
  subjectClassGrades SubjectClassGrade[] // Relation to the junction table
}

model Grade {
  id    String      @id @default(cuid())
  level Int @unique
  GradeClass GradeClass[]
  subjectClassGrades SubjectClassGrade[] // Relation to the junction table
}

model Class {
  id       String      @id @default(cuid())
  name     String @unique
  events        Event[]
  announcements Announcement[]
  GradeClass GradeClass[]
  subjectClassGrades SubjectClassGrade[] // Relation to the junction table
}

model GradeClass{
  id        String      @id @default(cuid())
  gradeId   String
  classId   String
  enrollments Enrollment[]
  assignments TeacherAssignment[]
  superviser Superviser[]
  grade     Grade   @relation(fields: [gradeId], references: [id])
  class     Class   @relation(fields: [classId], references: [id])
}
model Enrollment {
  id            String      @id @default(cuid())
  studentId     String
  gradeClassId  String
  year          String
  student       Student     @relation(fields: [studentId], references: [id])
  gradeClass    GradeClass  @relation(fields: [gradeClassId], references: [id])
}

model TeacherAssignment {
  id            String      @id @default(cuid())
  teacherId     String
  gradeClassId  String
  subjectId     String
  year          String
  teacher       Teacher     @relation(fields: [teacherId], references: [id])
  gradeClass    GradeClass  @relation(fields: [gradeClassId], references: [id])
  subject       Subject     @relation(fields: [subjectId], references: [id])
}

model Superviser {
  id            String      @id @default(cuid())
  teacherId     String
  gradeClassId  String
  year          String
  teacher       Teacher     @relation(fields: [teacherId], references: [id])
  gradeClass    GradeClass  @relation(fields: [gradeClassId], references: [id])
}


model Assignment {
  id        String      @id @default(cuid())
  title     String
  startDate DateTime
  dueDate   DateTime
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId String?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          String      @id @default(cuid())
  title       String
  description String
  date        DateTime

  classId String?
  class   Class? @relation(fields: [classId], references: [id])
}

model SubjectClassGrade {
  id        String      @id @default(cuid())
  subjectId String
  classId   String
  gradeId   String
  year      String

  subject   Subject @relation(fields: [subjectId], references: [id])
  class     Class   @relation(fields: [classId], references: [id])
  grade     Grade   @relation(fields: [gradeId], references: [id])

  @@unique([subjectId, classId, gradeId, year]) 
}
model Attendance {
  id       String   @id @default(cuid())
  studentId String
  status    AttendanceStatus?
  day       Int
  date      DateTime

  student   Student @relation(fields: [studentId], references: [id])
}

model Result {
  id           String   @id @default(cuid())
  studentId    String
  subjectId    String
  marks        Float?
  examType     String
  semester     String
  year         String
  gradeClassId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  createdByTeacherId String?
  createdByAdminId   String?
  updatedByTeacherId String?
  updatedByAdminId   String?

  student      Student  @relation(fields: [studentId], references: [id])
  subject      Subject  @relation(fields: [subjectId], references: [id])

  createdByTeacher  Teacher? @relation(name: "CreatedByTeacher", fields: [createdByTeacherId], references: [id])
  createdByAdmin    Admin?   @relation(name: "CreatedByAdmin", fields: [createdByAdminId], references: [id])
  updatedByTeacher  Teacher? @relation(name: "UpdatedByTeacher", fields: [updatedByTeacherId], references: [id])
  updatedByAdmin    Admin?   @relation(name: "UpdatedByAdmin", fields: [updatedByAdminId], references: [id])

  @@unique([studentId, subjectId, examType, year]) // Prevent duplicate results
}
model Rank {
  id         String   @id @default(cuid())
  studentId  String
  totalMarks Float
  rank       Int
  semester   String
  year       String
  createdAt  DateTime @default(now())

  student    Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId,semester, year]) // Unique rank semster and year
}

model ResultRelease {
  id         String   @id @default(cuid())
  year       String
  semester   Int
  deadline   DateTime
  isReleased Boolean  @default(false) // Determines if students can view results
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


enum AttendanceStatus {
  PRESENT 
  LATE
  ABSENT

}
enum UserRole {
  ADMIN 
  TEACHER 
  STUDENT 
  PARENT 
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}